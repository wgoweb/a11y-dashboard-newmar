{"version":3,"file":"static/webpack/static\\development\\pages\\[siteId]\\[configId]\\[pageId]\\[taskId].js.ed07908650d71bf5b587.hot-update.js","sources":["webpack:///./components/IssuesList.tsx"],"sourcesContent":["import { Theme, createStyles, WithStyles, withStyles, List, Box, ExpansionPanel, ExpansionPanelSummary, Typography, ExpansionPanelDetails, ListItem, ListItemText, Tooltip } from \"@material-ui/core\";\r\n\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport { Issue, WcagSection, IssueType } from \"./models\";\r\nimport React from \"react\";\r\n\r\ninterface InternalStylesProps extends WithStyles<typeof styles>{}\r\n\r\nexport interface IssuesListProps extends InternalStylesProps {\r\n    issues: Issue[];\r\n    issueType: IssueType;\r\n};\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    messageListItem: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'flex-start'\r\n    },\r\n    errorPanelHeader: {\r\n        backgroundColor: theme.palette.error.main,\r\n        color: theme.palette.error.contrastText\r\n    },\r\n    errorExpandIcon: {\r\n        color: theme.palette.error.contrastText\r\n    },\r\n    warningPanelHeader: {\r\n        backgroundColor: theme.palette.warning.main,\r\n        color: theme.palette.warning.contrastText\r\n    },\r\n    warningExpandIcon: {\r\n        color: theme.palette.warning.contrastText\r\n    },\r\n    noticePanelHeader: {\r\n        backgroundColor: theme.palette.info.main,\r\n        color: theme.palette.info.contrastText\r\n    },\r\n    noticeExpandIcon: {\r\n        color: theme.palette.info.contrastText\r\n    },\r\n});\r\n\r\ninterface GroupedIssue {\r\n    section: WcagSection;\r\n    hasSubgroup?: boolean;\r\n    issues: Issue[] | GroupedIssue[];\r\n    count: number;\r\n}\r\n\r\ninterface IssueMessageItem {\r\n    selector: string;\r\n    element: string;\r\n}\r\n\r\ninterface IssueMessage {\r\n    criterion: string;\r\n    message: string;\r\n    count: number;\r\n    techniques: string[];\r\n    items: IssueMessageItem[];\r\n};\r\n\r\nconst groupByMessage = (issues: Issue[]): IssueMessage[] => {\r\n    let groupedObj = issues.reduce((prev, cur) => {\r\n        let { message, selector, element, code } = cur;\r\n        let { criterion, techniques } = code;\r\n        let { handle, num } = criterion;\r\n\r\n        let issueMessage: IssueMessage = prev[message] || { criterion: `${num}. ${handle}`, message: message, techniques: techniques, items: [], count: 0 };\r\n        issueMessage.items.push({ selector: selector, element: element });\r\n        issueMessage.count = issueMessage.items.length;\r\n        prev[message] = issueMessage;\r\n        return prev;\r\n    }, {});\r\n    return Object.values(groupedObj);\r\n};\r\n\r\nconst groupBySection = (issues: Issue[], keyFn: (issue: Issue) => WcagSection): GroupedIssue[] => {\r\n    let groupedObj = issues.reduce((prev, cur) => {\r\n        let keyObj = keyFn(cur);\r\n        let keyStr = keyObj.num;\r\n\r\n        let groupedIssue: GroupedIssue = prev[keyStr] || { section: keyObj, issues: [], count: 0 };\r\n        groupedIssue.issues.push(cur as Issue & GroupedIssue);\r\n        groupedIssue.count = groupedIssue.issues.length;\r\n\r\n        prev[keyStr] = groupedIssue;\r\n        return prev;\r\n    }, {});\r\n\r\n    return Object.values(groupedObj);\r\n};\r\n\r\nconst messageList = (issueMessages: IssueMessage[], stylesProps: InternalStylesProps) => {\r\n    const {classes} = stylesProps;\r\n\r\n    return (\r\n        <ul>\r\n            {issueMessages.map((im, imIndex) =>\r\n                <li key={imIndex}>\r\n                    <Typography component=\"span\">\r\n                        {im.criterion}: {im.message}\r\n                    </Typography>\r\n                    <Typography component=\"div\">\r\n                        Techniques: {im.techniques.join(',')}\r\n                    </Typography>\r\n                    <List>\r\n                        {im.items.map((item, itemIndex) =>\r\n                            <ListItem key={itemIndex} className={classes.messageListItem} >\r\n                                <Typography color=\"primary\" component=\"div\">\r\n                                    <em>{item.selector}</em>\r\n                                </Typography>\r\n                                <Typography gutterBottom component=\"div\">\r\n                                    <code>{item.element}</code>\r\n                                </Typography>\r\n                            </ListItem>\r\n                        )}\r\n                    </List>\r\n                </li>\r\n            )}\r\n        </ul>\r\n    );\r\n};\r\n\r\nconst sectionPanel = (groupedIssue: GroupedIssue, issueType: IssueType, stylesProps: InternalStylesProps) => {\r\n    const { hasSubgroup, section, issues, count } = groupedIssue;\r\n    const { num, handle, title } = section;\r\n    const {classes} = stylesProps;\r\n\r\n    let panelHeaderClassName: string;\r\n    let expandIconClassName: string;\r\n    if (issueType == IssueType.Error) {\r\n        panelHeaderClassName = classes.errorPanelHeader;\r\n        expandIconClassName = classes.errorExpandIcon;\r\n    } else if (issueType == IssueType.Warning) {\r\n        panelHeaderClassName = classes.warningPanelHeader;\r\n        expandIconClassName = classes.warningExpandIcon;\r\n    } else if (issueType == IssueType.Notice) {\r\n        panelHeaderClassName = classes.noticePanelHeader;\r\n        expandIconClassName = classes.noticeExpandIcon;\r\n    }\r\n\r\n    return (\r\n        <ExpansionPanel style={{ width: '100%' }}>\r\n            <ExpansionPanelSummary\r\n                expandIcon={<ExpandMoreIcon className={expandIconClassName} />}\r\n                aria-controls={`panel-${num}-content`}\r\n                id={`panel-${num}-header`}\r\n                className={panelHeaderClassName}\r\n            >\r\n            <Typography component=\"span\">{num}. {handle} <strong>({count})</strong></Typography>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails style={{ flexDirection: 'column' }}>\r\n            <Typography guttersBottom>Info: <em>{title}</em></Typography>\r\n                {hasSubgroup ?\r\n                    <List>\r\n                        {(issues as GroupedIssue[]).map(gi =>\r\n                            <ListItem disableGutters key={gi.section.num} component=\"li\">\r\n                                {sectionPanel(gi, issueType, stylesProps)}\r\n                            </ListItem>\r\n                        )}\r\n                    </List>\r\n                    : messageList(groupByMessage(issues as Issue[]), stylesProps)}\r\n            </ExpansionPanelDetails>\r\n        </ExpansionPanel>\r\n    );\r\n};\r\n\r\nconst IssuesList = (props: IssuesListProps) => {\r\n    const { issues, issueType, ...stylesProps } = props;\r\n\r\n    const groupedIssues = groupBySection(issues, (issue) => issue.code.principle)\r\n        .map((gp): GroupedIssue => {\r\n            return {\r\n                section: gp.section,\r\n                hasSubgroup: true,\r\n                issues: groupBySection(gp.issues as Issue[], (issue) => issue.code.guideline),\r\n                count: gp.issues.length\r\n            };\r\n        });\r\n\r\n    return (\r\n        <List>\r\n            {groupedIssues.map((gi) =>\r\n                <ListItem disableGutters key={gi.section.num} component=\"li\">\r\n                    {sectionPanel(gi, issueType, stylesProps)}\r\n                </ListItem>\r\n            )}\r\n        </List>\r\n    );\r\n};\r\n\r\nexport default withStyles(styles)(IssuesList);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AAOA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAGA;AACA;AACA;AAFA;AAIA;AACA;AADA;AAxwBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAJA;AAMA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAOA;AACA;AACA;;;;A","sourceRoot":""}